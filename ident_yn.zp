/******************************************************************************\
FILE:           ident_yn.zp
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
ADAPTED BY:     -

EXPERIMENT:     Auditory Identification with Yes-No Response

DESCRIPTION:

Purpose of this experiment is to measure a participant's ability 
to identify (speech) sounds. For each trial a sound is presented. 
Participant's task is to jugdge whether a prespecified property is
present in the stimulus or not. Self-paced. Output: chosen value.


Global structure of experiment:

  - welcome

  - instructions

  - practice phase (... trials)
      trial

  - pause

  - test phase (... trials)
      trial

  - thankyou


HISTORY:
2012-01-30 TV   Created.

\******************************************************************************/

requires 1.6;

import std_windows1;
import std_texts_en;
import std_entry_page1;
import std_exit_page1;
import std_pause_page;
import std_blank_page;
import std_sound_output_device;

import test_page;


Experiment experiment
{
    on_event:entry()
    {
        show_test_windows();
    }


    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }


    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                "<b>Dear participant,</b>\n"
                "\n"
                "Thank you for participating in this experiment.\n"
                "\n"
                "You are now going to hear word fragments over the "
                "headphones, one after the other. Your task is to indicate "
                "for each sound whether you heard <b>ba</b> or not. Choose "
                "<i>Yes</i> if you think it's <i>ba</i>, otherwise choose "
                "<i>No</i>.\n"
                "\n"
                "First we will do a short practice.\n"
                "\n"
                "<i>Hit Enter when ready to start.</i>", 
                true);

            pause_page.action(this);
        }
    }


    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = test_prac_items.size;

            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(num_cycles, true);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_prac_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                "End of the practice part.\n"
                "\n"
                "If you have any questions at this moment please ask the "
                "experimenter now.\n"
                "\n"
                "<i>Hit Enter when ready to proceed.</i>", 
                true);

            pause_page.action(this);
        }
    }


    Block test
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            // Randomize test items table.
            if (shuffle_test_items() != OK) terminate;

            num_cycles = test_items.size;
//            num_cycles = 3;

            // Prepare test page: progress bar enabled, prompt disabled.
            test_page.setup(num_cycles, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test phase output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[test.cycle];

                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = test.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.sndfn = item.sndfn;
                output.value = test_page.response.value;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms, 500ms);
        }
    }


    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            exit_page.set_text(THANK_YOU_TEXT);
            exit_page.action(this, 10s);
        }
    }
}
